<apex:page docType="html-5.0"  showChat="true" sidebar="false" showHeader="false">
    <html>
        <meta name="apple-mobile-web-app-capable" content="yes"/>
        <meta name="mobile-web-app-capable" content="yes"/>
        
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" />
        <link rel="stylesheet" href="https://cdn.rawgit.com/TonyRenHK/TonyRenHK/master/Javascript/OpenSource/css/styles.css" />
        
        
        
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
        
        <script type="text/javascript">
            var filemanager,breadcrumbs,fileList;
        
        var response,currentPath,breadcrumbsUrls,data;
        var folders = [],files = [];
        
        $(document).ready(function(){//alert('enter');
            // Hiding and showing the search box
          
        });
        
        function GenerateData(){
            //      var DataObject = {  name:"files", path:"files",type:"folder",items  :[]}; // var TempObject = {name:"Archives",path:"files/Archives",type:"folder",items  :[]};
            var DataJson ='{"name":"files","type":"folder","path":"files","items":[{"name":"Archives","type":"folder","path":"files/Archives","items":[{"name":"7z","type":"folder","path":"files/Archives/7z","items":[{"name":"archive.7z","type":"file","path":"files/Archives/7z/archive.7z","size":257}]},{"name":"targz","type":"folder","path":"files/Archives/targz","items":[{"name":"archive.tar.gz","type":"file","path":"files/Archives/targz/archive.tar.gz","size":10074}]},{"name":"zip","type":"folder","path":"files/Archives/zip","items":[{"name":"archive.zip","type":"file","path":"files/Archives/zip/archive.zip","size":10133}]}]},{"name":"Important Documents","type":"folder","path":"files/Important Documents","items":[{"name":"Microsoft Office","type":"folder","path":"files/Important Documents/Microsoft Office","items":[{"name":"Geography.doc","type":"file","path":"files/Important Documents/Microsoft Office/Geography.doc","size":4096},{"name":"Table.xls","type":"file","path":"files/Important Documents/Microsoft Office/Table.xls","size":204800}]},{"name":"export.csv","type":"file","path":"files/Important Documents/export.csv","size":4096}]},{"name":"Movies","type":"folder","path":"files/Movies","items":[{"name":"Conan The Librarian.mkv","type":"file","path":"files/Movies/Conan The Librarian.mkv","size":0}]},{"name":"Music","type":"folder","path":"files/Music","items":[{"name":"awesome soundtrack.mp3","type":"file","path":"files/Music/awesome soundtrack.mp3","size":10240000},{"name":"hello world.mp3","type":"file","path":"files/Music/hello world.mp3","size":204800},{"name":"u2","type":"folder","path":"files/Music/u2","items":[{"name":"Unwanted Album","type":"folder","path":"files/Music/u2/Unwanted Album","items":[{"name":"track1.mp3","type":"file","path":"files/Music/u2/Unwanted Album/track1.mp3","size":204800},{"name":"track2.mp3","type":"file","path":"files/Music/u2/Unwanted Album/track2.mp3","size":204800},{"name":"track3.mp3","type":"file","path":"files/Music/u2/Unwanted Album/track3.mp3","size":204800},{"name":"track4.mp3","type":"file","path":"files/Music/u2/Unwanted Album/track4.mp3","size":204800}]}]}]},{"name":"Nothing here","type":"folder","path":"files/Nothing here","items":[]},{"name":"Photos","type":"folder","path":"files/Photos","items":[{"name":"pic1.jpg","type":"file","path":"files/Photos/pic1.jpg","size":204800},{"name":"pic2.jpg","type":"file","path":"files/Photos/pic2.jpg","size":204800},{"name":"pic3.png","type":"file","path":"files/Photos/pic3.png","size":204800},{"name":"pic4.gif","type":"file","path":"files/Photos/pic4.gif","size":204800},{"name":"pic5.jpg","type":"file","path":"files/Photos/pic5.jpg","size":204800}]},{"name":"Readme.html","type":"file","path":"files/Readme.html","size":344}]}';
            //console.log(JSON.parse(DataJson));
            return JSON.parse(DataJson);
        }
        
        function init(dataObj){
            response = [dataObj];
            currentPath = '';
            breadcrumbsUrls = [];
        }
        
        $(window).on('hashchange', function(){
            filemanager = $('.filemanager');
                breadcrumbs = $('.breadcrumbs');
                fileList = filemanager.find('.data');
            
            
            data=GenerateData();//console.log(data.path);
            init(data);
            console.log(filemanager.find('.search'));
            goto(window.location.hash);
            
            // We are triggering the event. This will execute 
            // this function on page load, so that we show the correct folder:
            
            
            
        }).trigger('hashchange');
        
        
     
        
        function FilemanagerSearch(e){//console.log($(this));console.log(e);   $('.filemanager').find('.search').click(function(){}); 
            var search = e;
            $('#FileSearchDiv').show();//search.find('span').hide();//search.find('input[type=search]').show();
        }
        
        // Listening for keyboard input on the search field.
        // We are using the "input" event which detects cut and paste
        // in addition to keyboard input.
        
        filemanager.find('input').on('input', function(e){
            
            folders = [];
            files = [];
            
            var value = this.value.trim();
            
            if(value.length) {
                
                filemanager.addClass('searching');
                
                // Update the hash on every key stroke
                window.location.hash = 'search=' + value.trim();
                
            }
            
            else {
                
                filemanager.removeClass('searching');
                window.location.hash = encodeURIComponent(currentPath);
                
            }
            
        }).on('keyup', function(e){
            
            // Clicking 'ESC' button triggers focusout and cancels the search
            
            var search = $(this);
            
            if(e.keyCode == 27) {
                
                search.trigger('focusout');
                
            }
            
        }).focusout(function(e){
            
            // Cancel the search
            
            var search = $(this);
            
            if(!search.val().trim().length) {
                
                window.location.hash = encodeURIComponent(currentPath);
                search.hide();
                search.parent().find('span').show();
                
            }
            
        });
        
        
        // Clicking on folders
        
        fileList.on('click', 'li.folders', function(e){
            e.preventDefault();
            
            var nextDir = $(this).find('a.folders').attr('href');
            
            if(filemanager.hasClass('searching')) {
                
                // Building the breadcrumbs
                
                breadcrumbsUrls = generateBreadcrumbs(nextDir);
                
                filemanager.removeClass('searching');
                filemanager.find('input[type=search]').val('').hide();
                filemanager.find('span').show();
            }
            else {
                breadcrumbsUrls.push(nextDir);
            }
            
            window.location.hash = encodeURIComponent(nextDir);
            currentPath = nextDir;
        });
        
        
        // Clicking on breadcrumbs
        
        breadcrumbs.on('click', 'a', function(e){
            e.preventDefault();
            
            var index = breadcrumbs.find('a').index($(this)),
                nextDir = breadcrumbsUrls[index];
            
            breadcrumbsUrls.length = Number(index);
            
            window.location.hash = encodeURIComponent(nextDir);
            
        });
        
        
        // Navigates to the given hash (path)
        
        function goto(hash) {
            
            hash = decodeURIComponent(hash).slice(1).split('=');
            console.log(hash);
            if (hash.length) {
                var rendered = '';
                
                // if hash has search in it
                
                if (hash[0] === 'search') {
                    
                    filemanager.addClass('searching');
                    rendered = searchData(response, hash[1].toLowerCase());
                    
                    if (rendered.length) {
                        currentPath = hash[0];
                        render(rendered);
                    }
                    else {
                        render(rendered);
                    }
                    
                }
                
                // if hash is some path
                
                else if (hash[0].trim().length) {
                    
                    rendered = searchByPath(hash[0]);
                    
                    if (rendered.length) {
                        
                        currentPath = hash[0];
                        breadcrumbsUrls = generateBreadcrumbs(hash[0]);
                        render(rendered);
                        
                    }
                    else {
                        currentPath = hash[0];
                        breadcrumbsUrls = generateBreadcrumbs(hash[0]);
                        render(rendered);
                    }
                    
                }
                
                // if there is no hash
                
                    else {
                        currentPath = data.path;
                        breadcrumbsUrls.push(data.path);
                        render(searchByPath(data.path));
                    }
            }
        }
        
        // Splits a file path and turns it into clickable breadcrumbs
        
        function generateBreadcrumbs(nextDir){
            var path = nextDir.split('/').slice(0);
            for(var i=1;i<path.length;i++){
                path[i] = path[i-1]+ '/' +path[i];
            }
            return path;
        }
        
        
        // Locates a file by path
        
        function searchByPath(dir) {
            var path = dir.split('/'),
                demo = response,
                flag = 0;
            
            for(var i=0;i<path.length;i++){
                for(var j=0;j<demo.length;j++){
                    if(demo[j].name === path[i]){
                        flag = 1;
                        demo = demo[j].items;
                        break;
                    }
                }
            }
            
            demo = flag ? demo : [];
            return demo;
        }
        
        
        // Recursively search through the file tree
        
        function searchData(data, searchTerms) {
            
            data.forEach(function(d){
                if(d.type === 'folder') {
                    
                    searchData(d.items,searchTerms);
                    
                    if(d.name.toLowerCase().match(searchTerms)) {
                        folders.push(d);
                    }
                }
                else if(d.type === 'file') {
                    if(d.name.toLowerCase().match(searchTerms)) {
                        files.push(d);
                    }
                }
            });
            return {folders: folders, files: files};
        }
        
        
        // Render the HTML for the file manager
        
        function render(data) {
            
            var scannedFolders = [],
                scannedFiles = [];
            
            if(Array.isArray(data)) {
                
                data.forEach(function (d) {
                    
                    if (d.type === 'folder') {
                        scannedFolders.push(d);
                    }
                    else if (d.type === 'file') {
                        scannedFiles.push(d);
                    }
                    
                });
                
            }
            else if(typeof data === 'object') {
                
                scannedFolders = data.folders;
                scannedFiles = data.files;
                
            }
            
            
            // Empty the old result and make the new one
            
            fileList.empty().hide();
            
            if(!scannedFolders.length && !scannedFiles.length) {
                filemanager.find('.nothingfound').show();
            }
            else {
                filemanager.find('.nothingfound').hide();
            }
            
            if(scannedFolders.length) {
                
                scannedFolders.forEach(function(f) {
                    
                    var itemsLength = f.items.length,
                        name = escapeHTML(f.name),
                        icon = '<span class="icon folder"></span>';
                    
                    if(itemsLength) {
                        icon = '<span class="icon folder full"></span>';
                    }
                    
                    if(itemsLength == 1) {
                        itemsLength += ' item';
                    }
                    else if(itemsLength > 1) {
                        itemsLength += ' items';
                    }
                        else {
                            itemsLength = 'Empty';
                        }
                    
                    var folder = $('<li class="folders"><a href="'+ f.path +'" title="'+ f.path +'" class="folders">'+icon+'<span class="name">' + name + '</span> <span class="details">' + itemsLength + '</span></a></li>');
                    folder.appendTo(fileList);
                });
                
            }
            
            if(scannedFiles.length) {
                
                scannedFiles.forEach(function(f) {
                    
                    var fileSize = bytesToSize(f.size),
                        name = escapeHTML(f.name),
                        fileType = name.split('.'),
                        icon = '<span class="icon file"></span>';
                    
                    fileType = fileType[fileType.length-1];
                    
                    icon = '<span class="icon file f-'+fileType+'">.'+fileType+'</span>';
                    
                    var file = $('<li class="files"><a href="'+ f.path+'" title="'+ f.path +'" class="files">'+icon+'<span class="name">'+ name +'</span> <span class="details">'+fileSize+'</span></a></li>');
                    file.appendTo(fileList);
                });
                
            }
            
            
            // Generate the breadcrumbs
            
            var url = '';
            
            if(filemanager.hasClass('searching')){
                
                url = '<span>Search results: </span>';
                fileList.removeClass('animated');
                
            }
            else {
                
                fileList.addClass('animated');
                
                breadcrumbsUrls.forEach(function (u, i) {
                    
                    var name = u.split('/');
                    
                    if (i !== breadcrumbsUrls.length - 1) {
                        url += '<a href="'+u+'"><span class="folderName">' + name[name.length-1] + '</span></a> <span class="arrow">→</span> ';
                    }
                    else {
                        url += '<span class="folderName">' + name[name.length-1] + '</span>';
                    }
                    
                });
                
            }
            
            breadcrumbs.text('').append(url);
            
            
            // Show the generated elements
            
            fileList.animate({'display':'inline-block'});
            
        }
        
        
        // This function escapes special html characters in names
        
        function escapeHTML(text) {
            return text.replace(/\&/g,'&amp;').replace(/\</g,'&lt;').replace(/\>/g,'&gt;');
        }
        
        
        // Convert file sizes from bytes to human readable units
        
        function bytesToSize(bytes) {
            var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
            if (bytes == 0) return '0 Bytes';
            var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));
            return Math.round(bytes / Math.pow(1024, i), 2) + ' ' + sizes[i];
        }
        
        
        </script>    
        <body>
            
            <div class="filemanager">
                
                <div class="search" onclick="FilemanagerSearch(this);">
                    <input type="search" id='FileSearchDiv' placeholder="Find a file.." />
                </div>
                
                <div class="breadcrumbs"></div>
                
                <ul class="data"></ul>
                
                <div class="nothingfound">
                    <div class="nofiles"></div>
                    <span>No files here.</span>
                </div>
                
            </div>
            
            <footer>
                
                <div id="tzine-actions"></div>
                <span class="close"></span>
            </footer>
            
            
            
            
        </body>
        
    </html>
</apex:page>
